/* The following code was generated by JFlex 1.4.3 on 14/07/11 11:23 */

/*
 * 02/15/2005
 *
 * SQLTokenMaker.java - Scanner for SQL.
 * Copyright (C) 2005 Robert Futrell
 * robert_futrell at users.sourceforge.net
 * http://fifesoft.com/rsyntaxtextarea
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * This class generates tokens representing a text stream as SQL.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated SQLTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.5
 *
 */

public class SQLTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 6;
  public static final int CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\1\25\0\1\4\1\0\1\56\4\0\1\57\2\16"+
    "\1\13\1\11\1\0\1\12\1\20\1\14\1\3\1\51\1\52\1\3"+
    "\1\46\3\3\1\47\1\3\1\17\1\0\1\10\1\7\1\6\1\0"+
    "\1\15\1\22\1\40\1\32\1\23\1\21\1\45\1\50\1\42\1\35"+
    "\1\53\1\54\1\24\1\36\1\27\1\34\1\43\1\55\1\26\1\31"+
    "\1\25\1\33\1\37\1\41\1\44\1\30\1\2\1\60\1\0\1\61"+
    "\1\0\1\5\1\0\1\22\1\40\1\32\1\23\1\21\1\45\1\50"+
    "\1\42\1\35\1\53\1\54\1\24\1\36\1\27\1\34\1\43\1\55"+
    "\1\26\1\31\1\25\1\33\1\37\1\41\1\44\1\30\1\2\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\1\1\3\1\4\5\5\1\1"+
    "\1\6\1\1\1\7\1\1\1\10\27\1\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\14\1\17\1\20\1\14"+
    "\1\21\1\14\1\1\1\0\1\22\1\23\7\1\1\10"+
    "\11\1\1\10\13\1\1\10\12\1\1\10\26\1\2\10"+
    "\7\1\2\10\1\1\1\10\12\1\1\10\26\1\1\24"+
    "\1\14\1\25\1\1\1\7\1\0\13\1\1\26\40\1"+
    "\1\10\10\1\1\10\42\1\1\10\2\1\1\10\10\1"+
    "\1\10\3\1\1\10\5\1\1\10\25\1\1\10\17\1"+
    "\2\10\3\1\1\10\12\1\1\10\37\1\1\10\1\1"+
    "\1\10\25\1\2\10\4\1\1\10\33\1\2\10\32\1"+
    "\1\10\5\1\1\10\22\1\1\10\1\1\1\10\23\1"+
    "\1\10\35\1\1\10\2\1\1\10\5\1\1\10\4\1"+
    "\1\10\15\1\2\10\32\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[589];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\310\0\372\0\u012c"+
    "\0\u015e\0\u0190\0\310\0\u01c2\0\u01f4\0\u0226\0\u0258\0\310"+
    "\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8"+
    "\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578"+
    "\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708"+
    "\0\u073a\0\u076c\0\u079e\0\310\0\310\0\u07d0\0\u0802\0\310"+
    "\0\u0834\0\u0866\0\310\0\u0898\0\u08ca\0\310\0\u08fc\0\u092e"+
    "\0\u0960\0\u0992\0\310\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c"+
    "\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c"+
    "\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac"+
    "\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c"+
    "\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc"+
    "\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c"+
    "\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec"+
    "\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c"+
    "\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c"+
    "\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u0f6e\0\u079e\0\u1838"+
    "\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8"+
    "\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58"+
    "\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8"+
    "\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2\0\u1e14\0\u1e46\0\u1e78"+
    "\0\310\0\310\0\310\0\u1eaa\0\u1edc\0\u1edc\0\u1f0e\0\u1f40"+
    "\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u206c\0\u209e\0\u20d0"+
    "\0\u2102\0\u079e\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e"+
    "\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c\0\u23be"+
    "\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c\0\u254e"+
    "\0\u2580\0\u25b2\0\u25e4\0\u2616\0\u2648\0\u267a\0\u26ac\0\u26de"+
    "\0\u2710\0\u2742\0\u0bea\0\u2774\0\u27a6\0\u27d8\0\u280a\0\u283c"+
    "\0\u286e\0\u28a0\0\u28d2\0\u2904\0\u2936\0\u2968\0\u299a\0\u29cc"+
    "\0\u29fe\0\u2a30\0\u2a62\0\u2a94\0\u2ac6\0\u2af8\0\u2b2a\0\u2b5c"+
    "\0\u2b8e\0\u2bc0\0\u2bf2\0\u2c24\0\u2c56\0\u2c88\0\u2cba\0\u2cec"+
    "\0\u2d1e\0\u2d50\0\u2d82\0\u2db4\0\u2de6\0\u2e18\0\u2e4a\0\u2e7c"+
    "\0\u2eae\0\u2ee0\0\u2f12\0\u2f44\0\u2f76\0\u2fa8\0\u2fda\0\u300c"+
    "\0\u303e\0\u3070\0\u30a2\0\u30d4\0\u3106\0\u3138\0\u316a\0\u319c"+
    "\0\u31ce\0\u3200\0\u3232\0\u3264\0\u3296\0\u32c8\0\u32fa\0\u332c"+
    "\0\u335e\0\u3390\0\u33c2\0\u33f4\0\u3426\0\u3458\0\u348a\0\u34bc"+
    "\0\u34ee\0\u3520\0\u3552\0\u3584\0\u35b6\0\u35e8\0\u361a\0\u364c"+
    "\0\u367e\0\u36b0\0\u36e2\0\u3714\0\u3746\0\u3778\0\u37aa\0\u37dc"+
    "\0\u380e\0\u3840\0\u3872\0\u38a4\0\u38d6\0\u3908\0\u393a\0\u396c"+
    "\0\u399e\0\u39d0\0\u3a02\0\u3a34\0\u3a66\0\u3a98\0\u3aca\0\u3afc"+
    "\0\u3b2e\0\u3b60\0\u3b92\0\u3bc4\0\u3bf6\0\u3c28\0\u3c5a\0\u3c8c"+
    "\0\u3cbe\0\u3cf0\0\u3d22\0\u3d54\0\u3d86\0\u3db8\0\u3dea\0\u3e1c"+
    "\0\u3e4e\0\u3e80\0\u3eb2\0\u3ee4\0\u3f16\0\u3f48\0\u3f7a\0\u3fac"+
    "\0\u3fde\0\u4010\0\u4042\0\u4074\0\u40a6\0\u40d8\0\u410a\0\u413c"+
    "\0\u416e\0\u41a0\0\u41d2\0\u4204\0\u4236\0\u4268\0\u429a\0\u42cc"+
    "\0\u42fe\0\u4330\0\u4362\0\u4394\0\u43c6\0\u43f8\0\u442a\0\u445c"+
    "\0\u448e\0\u44c0\0\u44f2\0\u4524\0\u4556\0\u4588\0\u45ba\0\u45ec"+
    "\0\u461e\0\u4650\0\u4682\0\u46b4\0\u46e6\0\u4718\0\u474a\0\u477c"+
    "\0\u47ae\0\u47e0\0\u4812\0\u4844\0\u4876\0\u48a8\0\u48da\0\u490c"+
    "\0\u493e\0\u4970\0\u49a2\0\u49d4\0\u4a06\0\u4a38\0\u4a6a\0\u4a9c"+
    "\0\u4ace\0\u4b00\0\u4b32\0\u4b64\0\u4b96\0\u4bc8\0\u4bfa\0\u4c2c"+
    "\0\u4c5e\0\u1644\0\u4c90\0\u4cc2\0\u4cf4\0\u4d26\0\u4d58\0\u4d8a"+
    "\0\u4dbc\0\u4dee\0\u4e20\0\u4e52\0\u4e84\0\u4eb6\0\u4ee8\0\u4f1a"+
    "\0\u4f4c\0\u4f7e\0\u4fb0\0\u4fe2\0\u5014\0\u5046\0\u5078\0\u50aa"+
    "\0\u50dc\0\u510e\0\u5140\0\u5172\0\u51a4\0\u51d6\0\u5208\0\u523a"+
    "\0\u526c\0\u529e\0\u52d0\0\u5302\0\u5334\0\u5366\0\u49a2\0\u5398"+
    "\0\u53ca\0\u53fc\0\u542e\0\u5460\0\u5492\0\u54c4\0\u54f6\0\u5528"+
    "\0\u2008\0\u555a\0\u558c\0\u55be\0\u3426\0\u55f0\0\u5622\0\u5654"+
    "\0\u5686\0\u56b8\0\u56ea\0\u571c\0\u574e\0\u5780\0\u57b2\0\u57e4"+
    "\0\u5816\0\u5848\0\u587a\0\u58ac\0\u58de\0\u5910\0\u5942\0\u5974"+
    "\0\u59a6\0\u59d8\0\u5a0a\0\u2a30\0\u5a3c\0\u5a6e\0\u5aa0\0\u5ad2"+
    "\0\u5b04\0\u5b36\0\u5b68\0\u5b9a\0\u5bcc\0\u5bfe\0\u5c30\0\u5c62"+
    "\0\u5c94\0\u5cc6\0\u5cf8\0\u5d2a\0\u5d5c\0\u5d8e\0\u5dc0\0\u5df2"+
    "\0\u5e24\0\u5e56\0\u5e88\0\u5eba\0\u5eec\0\u5f1e\0\u5f50\0\u5f82"+
    "\0\u5fb4\0\u5fe6\0\u6018\0\u604a\0\u607c\0\u60ae\0\u60e0\0\u6112"+
    "\0\u6144\0\u6176\0\u61a8\0\u61da\0\u620c\0\u623e\0\u6270\0\u62a2"+
    "\0\u62d4\0\u6306\0\u6338\0\u636a\0\u639c\0\u63ce\0\u6400\0\u6432"+
    "\0\u0a28\0\u6464\0\u6496\0\u64c8\0\u64fa\0\u652c\0\u655e\0\u6590"+
    "\0\u65c2\0\u65f4\0\u6626\0\u6658\0\u668a\0\u66bc\0\u66ee\0\u6720"+
    "\0\u6752\0\u6784\0\u67b6\0\u67e8\0\u681a\0\u684c\0\u687e\0\u68b0"+
    "\0\u68e2\0\u6914\0\u6946\0\u6978\0\u69aa\0\u69dc\0\u6a0e\0\u6a40"+
    "\0\u6a72\0\u6aa4\0\u6ad6\0\u6b08\0\u6b3a\0\u6b6c\0\u6b9e\0\u6bd0"+
    "\0\u6c02\0\u6c34\0\u6c66\0\u6c98\0\u6cca\0\u6cfc\0\u6d2e\0\u6d60"+
    "\0\u6d92\0\u6dc4\0\u6df6\0\u6e28\0\u6e5a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[589];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\5\1\12\1\13"+
    "\1\14\1\13\1\15\1\13\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\2\10\1\50"+
    "\2\10\1\51\1\52\1\53\1\54\1\55\1\56\1\5"+
    "\1\57\1\60\54\57\1\61\3\57\1\62\1\63\55\62"+
    "\1\64\2\62\1\65\1\66\11\65\1\67\46\65\64\0"+
    "\2\53\1\0\1\53\13\0\13\53\1\70\21\53\7\0"+
    "\1\10\14\0\1\22\1\71\24\0\2\10\1\0\2\10"+
    "\13\0\1\11\64\0\1\13\60\0\2\13\64\0\1\72"+
    "\62\0\1\73\63\0\1\13\46\0\1\53\16\0\25\53"+
    "\2\0\1\53\2\0\3\53\7\0\1\22\15\0\1\71"+
    "\24\0\2\22\1\0\2\22\11\0\2\53\1\0\1\53"+
    "\13\0\1\53\1\74\1\53\1\75\2\53\1\76\14\53"+
    "\1\77\11\53\6\0\2\53\1\0\1\53\13\0\2\53"+
    "\1\76\1\100\1\53\1\101\1\102\1\53\1\103\1\104"+
    "\1\105\3\53\1\106\1\107\4\53\1\110\2\53\1\111"+
    "\5\53\6\0\2\53\1\0\1\53\13\0\1\112\1\113"+
    "\3\53\1\114\5\53\1\115\1\116\20\53\6\0\2\53"+
    "\1\0\1\53\13\0\1\117\1\120\6\53\1\121\2\53"+
    "\1\122\1\123\20\53\6\0\2\53\1\0\1\53\13\0"+
    "\1\124\1\125\3\53\1\126\1\53\1\127\1\130\2\53"+
    "\1\131\1\132\4\53\1\133\1\53\1\134\11\53\6\0"+
    "\2\53\1\0\1\53\13\0\1\135\11\53\1\136\1\137"+
    "\1\140\20\53\6\0\2\53\1\0\1\53\13\0\1\141"+
    "\1\142\10\53\1\143\1\144\21\53\6\0\2\53\1\0"+
    "\1\53\13\0\1\145\34\53\6\0\2\53\1\0\1\53"+
    "\13\0\1\146\3\53\1\147\2\53\1\150\1\53\1\151"+
    "\1\152\1\153\1\154\1\155\3\53\1\156\13\53\6\0"+
    "\2\53\1\0\1\53\13\0\1\53\1\157\1\53\1\160"+
    "\1\53\1\161\4\53\1\162\1\163\1\164\4\53\1\165"+
    "\13\53\6\0\2\53\1\0\1\53\13\0\6\53\1\166"+
    "\1\53\1\167\1\53\1\170\7\53\1\171\12\53\6\0"+
    "\2\53\1\0\1\53\13\0\3\53\1\172\1\53\1\173"+
    "\1\174\2\53\1\175\1\110\1\53\1\176\1\53\1\177"+
    "\1\53\1\200\1\53\1\201\1\53\1\202\10\53\6\0"+
    "\2\53\1\0\1\53\13\0\3\53\1\203\2\53\1\204"+
    "\1\53\1\205\4\53\1\206\6\53\1\207\2\53\1\210"+
    "\5\53\6\0\2\53\1\0\1\53\13\0\1\211\1\212"+
    "\11\53\1\213\1\214\20\53\6\0\2\53\1\0\1\53"+
    "\13\0\1\215\1\216\11\53\1\217\1\220\20\53\6\0"+
    "\2\53\1\0\1\53\13\0\1\221\6\53\1\222\3\53"+
    "\1\223\1\224\20\53\6\0\2\53\1\0\1\53\13\0"+
    "\5\53\1\225\6\53\1\226\4\53\1\227\13\53\6\0"+
    "\2\53\1\0\1\53\13\0\1\53\1\230\33\53\6\0"+
    "\2\53\1\0\1\53\13\0\1\231\1\232\1\53\1\233"+
    "\1\53\1\234\5\53\1\235\1\236\20\53\6\0\2\53"+
    "\1\0\1\53\13\0\15\53\1\237\17\53\6\0\2\53"+
    "\1\0\1\53\13\0\1\53\1\240\1\53\1\241\1\53"+
    "\1\242\4\53\1\243\1\244\21\53\6\0\2\53\1\0"+
    "\1\53\13\0\1\245\4\53\1\246\4\53\1\170\22\53"+
    "\6\0\2\53\1\0\1\53\13\0\13\53\1\247\21\53"+
    "\6\0\2\53\1\0\1\53\13\0\1\250\34\53\6\0"+
    "\2\53\1\0\1\53\13\0\35\53\4\0\61\56\1\251"+
    "\1\57\1\0\54\57\1\0\3\57\56\0\1\252\3\0"+
    "\1\62\1\0\55\62\1\0\2\62\57\0\1\252\2\0"+
    "\1\65\1\0\11\65\1\0\46\65\14\0\1\253\47\0"+
    "\2\53\1\0\1\53\13\0\6\53\1\254\26\53\7\0"+
    "\1\255\5\0\2\256\33\0\2\255\1\0\2\255\7\0"+
    "\1\72\1\0\60\72\2\0\2\53\1\0\1\53\13\0"+
    "\11\53\1\257\23\53\6\0\2\53\1\0\1\53\13\0"+
    "\10\53\1\254\24\53\6\0\2\53\1\0\1\53\13\0"+
    "\2\53\1\207\32\53\6\0\2\53\1\0\1\53\13\0"+
    "\1\260\3\53\1\261\4\53\1\262\2\53\1\263\20\53"+
    "\6\0\2\53\1\0\1\53\13\0\3\53\1\207\1\264"+
    "\30\53\6\0\2\53\1\0\1\53\13\0\5\53\1\265"+
    "\27\53\6\0\2\53\1\0\1\53\13\0\1\53\1\266"+
    "\1\207\4\53\1\207\25\53\6\0\2\53\1\0\1\53"+
    "\13\0\7\53\1\267\1\53\1\207\23\53\6\0\2\53"+
    "\1\0\1\53\13\0\4\53\1\270\30\53\6\0\2\53"+
    "\1\0\1\53\13\0\4\53\1\271\30\53\6\0\2\53"+
    "\1\0\1\53\13\0\1\53\1\207\25\53\1\272\5\53"+
    "\6\0\2\53\1\0\1\53\13\0\10\53\1\207\24\53"+
    "\6\0\2\53\1\0\1\53\13\0\4\53\1\264\30\53"+
    "\6\0\2\53\1\0\1\53\13\0\27\53\1\273\5\53"+
    "\6\0\2\53\1\0\1\53\13\0\3\53\1\274\4\53"+
    "\1\275\1\276\12\53\1\277\10\53\6\0\2\53\1\0"+
    "\1\53\13\0\4\53\1\300\2\53\1\207\25\53\6\0"+
    "\2\53\1\0\1\53\13\0\13\53\1\206\21\53\6\0"+
    "\2\53\1\0\1\53\13\0\12\53\1\301\2\53\1\302"+
    "\17\53\6\0\2\53\1\0\1\53\13\0\10\53\1\303"+
    "\24\53\6\0\2\53\1\0\1\53\13\0\1\53\1\304"+
    "\14\53\1\305\5\53\1\306\10\53\6\0\2\53\1\0"+
    "\1\53\13\0\6\53\1\307\26\53\6\0\2\53\1\0"+
    "\1\53\13\0\1\310\34\53\6\0\2\53\1\0\1\53"+
    "\13\0\6\53\1\311\2\53\1\312\6\53\1\313\6\53"+
    "\1\314\5\53\6\0\2\53\1\0\1\53\13\0\6\53"+
    "\1\254\6\53\1\315\15\53\1\254\1\53\6\0\2\53"+
    "\1\0\1\53\13\0\15\53\1\316\5\53\1\306\11\53"+
    "\6\0\2\53\1\0\1\53\13\0\17\53\1\317\15\53"+
    "\6\0\2\53\1\0\1\53\13\0\1\53\1\320\10\53"+
    "\1\254\1\53\1\321\20\53\6\0\2\53\1\0\1\53"+
    "\13\0\22\53\1\254\12\53\6\0\2\53\1\0\1\53"+
    "\13\0\16\53\1\322\15\53\1\323\6\0\2\53\1\0"+
    "\1\53\13\0\22\53\1\207\12\53\6\0\2\53\1\0"+
    "\1\53\13\0\15\53\1\324\17\53\6\0\2\53\1\0"+
    "\1\53\13\0\1\325\34\53\6\0\2\53\1\0\1\53"+
    "\13\0\14\53\1\326\20\53\6\0\2\53\1\0\1\53"+
    "\13\0\1\53\1\237\2\53\1\327\3\53\1\330\11\53"+
    "\1\331\1\53\1\332\10\53\6\0\2\53\1\0\1\53"+
    "\13\0\3\53\1\254\31\53\6\0\2\53\1\0\1\53"+
    "\13\0\3\53\1\254\14\53\1\333\14\53\6\0\2\53"+
    "\1\0\1\53\13\0\27\53\1\334\5\53\6\0\2\53"+
    "\1\0\1\53\13\0\20\53\1\207\2\53\1\335\11\53"+
    "\6\0\2\53\1\0\1\53\13\0\4\53\1\336\30\53"+
    "\6\0\2\53\1\0\1\53\13\0\3\53\1\237\11\53"+
    "\1\337\17\53\6\0\2\53\1\0\1\53\13\0\4\53"+
    "\1\205\30\53\6\0\2\53\1\0\1\53\13\0\1\53"+
    "\1\340\6\53\1\341\24\53\6\0\2\53\1\0\1\53"+
    "\13\0\1\53\1\342\1\53\1\343\1\344\1\345\2\53"+
    "\1\346\23\53\1\347\6\0\2\53\1\0\1\53\13\0"+
    "\1\53\1\350\1\351\2\53\1\352\27\53\6\0\2\53"+
    "\1\0\1\53\13\0\10\53\1\353\4\53\1\354\17\53"+
    "\6\0\2\53\1\0\1\53\13\0\21\53\1\355\13\53"+
    "\6\0\2\53\1\0\1\53\13\0\15\53\1\207\1\53"+
    "\1\356\15\53\6\0\2\53\1\0\1\53\13\0\15\53"+
    "\1\254\17\53\6\0\2\53\1\0\1\53\13\0\6\53"+
    "\1\357\6\53\1\360\17\53\6\0\2\53\1\0\1\53"+
    "\13\0\1\53\1\361\33\53\6\0\2\53\1\0\1\53"+
    "\13\0\13\53\1\362\21\53\6\0\2\53\1\0\1\53"+
    "\13\0\10\53\1\363\1\364\23\53\6\0\2\53\1\0"+
    "\1\53\13\0\1\53\1\365\33\53\6\0\2\53\1\0"+
    "\1\53\13\0\1\366\34\53\6\0\2\53\1\0\1\53"+
    "\13\0\5\53\1\367\27\53\6\0\2\53\1\0\1\53"+
    "\13\0\3\53\1\370\2\53\1\371\3\53\1\372\2\53"+
    "\1\373\4\53\1\250\12\53\6\0\2\53\1\0\1\53"+
    "\13\0\2\53\1\340\2\53\1\374\27\53\6\0\2\53"+
    "\1\0\1\53\13\0\1\375\1\376\33\53\6\0\2\53"+
    "\1\0\1\53\13\0\14\53\1\377\20\53\6\0\2\53"+
    "\1\0\1\53\13\0\1\u0100\13\53\1\u0101\20\53\6\0"+
    "\2\53\1\0\1\53\13\0\14\53\1\76\20\53\6\0"+
    "\2\53\1\0\1\53\13\0\2\53\1\366\17\53\1\313"+
    "\12\53\6\0\2\53\1\0\1\53\13\0\1\u0102\1\53"+
    "\1\207\32\53\6\0\2\53\1\0\1\53\13\0\2\53"+
    "\1\264\32\53\6\0\2\53\1\0\1\53\13\0\3\53"+
    "\1\250\31\53\6\0\2\53\1\0\1\53\13\0\4\53"+
    "\1\u0103\30\53\6\0\2\53\1\0\1\53\13\0\2\53"+
    "\1\107\32\53\6\0\2\53\1\0\1\53\13\0\1\u0104"+
    "\34\53\6\0\2\53\1\0\1\53\13\0\6\53\1\u0105"+
    "\26\53\6\0\2\53\1\0\1\53\13\0\1\u0106\3\53"+
    "\1\270\30\53\6\0\2\53\1\0\1\53\13\0\24\53"+
    "\1\u0107\10\53\6\0\2\53\1\0\1\53\13\0\14\53"+
    "\1\u0108\20\53\6\0\2\53\1\0\1\53\13\0\1\306"+
    "\1\53\1\u0109\1\53\1\u010a\1\53\1\264\1\53\1\u010b"+
    "\1\u010c\2\53\1\u010d\20\53\6\0\2\53\1\0\1\53"+
    "\13\0\6\53\1\u010e\26\53\6\0\2\53\1\0\1\53"+
    "\13\0\6\53\1\u010f\26\53\6\0\2\53\1\0\1\53"+
    "\13\0\15\53\1\u0110\17\53\6\0\2\53\1\0\1\53"+
    "\13\0\11\53\1\u0111\10\53\1\u0112\1\u0113\11\53\6\0"+
    "\2\53\1\0\1\53\13\0\2\53\1\207\3\53\1\u0114"+
    "\26\53\6\0\2\53\1\0\1\53\13\0\6\53\1\u0113"+
    "\26\53\6\0\2\53\1\0\1\53\13\0\5\53\1\u0115"+
    "\27\53\6\0\2\53\1\0\1\53\13\0\3\53\1\u0116"+
    "\1\53\1\u0117\27\53\6\0\2\53\1\0\1\53\13\0"+
    "\3\53\1\u0118\31\53\6\0\2\53\1\0\1\53\13\0"+
    "\1\u0119\34\53\6\0\2\53\1\0\1\53\13\0\4\53"+
    "\1\u011a\17\53\1\u010f\2\53\1\247\5\53\6\0\2\53"+
    "\1\0\1\53\13\0\4\53\1\u011b\30\53\6\0\2\53"+
    "\1\0\1\53\13\0\4\53\1\257\6\53\1\u011c\7\53"+
    "\1\207\11\53\6\0\2\53\1\0\1\53\13\0\4\53"+
    "\1\u011d\1\53\1\u011e\20\53\1\u011f\5\53\6\0\2\53"+
    "\1\0\1\53\13\0\1\53\1\u0120\33\53\6\0\2\53"+
    "\1\0\1\53\13\0\4\53\1\u0121\30\53\6\0\2\53"+
    "\1\0\1\53\13\0\1\u0122\34\53\6\0\2\53\1\0"+
    "\1\53\13\0\16\53\1\352\16\53\6\0\2\53\1\0"+
    "\1\53\13\0\5\53\1\u0123\27\53\6\0\2\53\1\0"+
    "\1\53\13\0\4\53\1\257\1\u0124\2\53\1\u0125\24\53"+
    "\6\0\2\53\1\0\1\53\13\0\1\53\1\u0126\33\53"+
    "\6\0\2\53\1\0\1\53\13\0\1\u0127\12\53\1\u0128"+
    "\1\u0129\20\53\6\0\2\53\1\0\1\53\13\0\3\53"+
    "\1\u012a\4\53\1\u012b\3\53\1\u012c\20\53\6\0\2\53"+
    "\1\0\1\53\13\0\16\53\1\u012d\16\53\6\0\2\53"+
    "\1\0\1\53\13\0\3\53\1\207\31\53\6\0\2\53"+
    "\1\0\1\53\13\0\3\53\1\75\11\53\1\u012e\17\53"+
    "\6\0\2\53\1\0\1\53\13\0\13\53\1\u012f\21\53"+
    "\6\0\2\53\1\0\1\53\13\0\1\u0130\12\53\1\u0131"+
    "\21\53\6\0\2\53\1\0\1\53\13\0\3\53\1\237"+
    "\2\53\1\u0132\26\53\6\0\2\53\1\0\1\53\13\0"+
    "\5\53\1\u0133\27\53\6\0\2\53\1\0\1\53\13\0"+
    "\6\53\1\u0134\26\53\6\0\2\53\1\0\1\53\13\0"+
    "\1\53\1\u012c\11\53\1\u0135\21\53\6\0\2\53\1\0"+
    "\1\53\13\0\14\53\1\325\20\53\6\0\2\53\1\0"+
    "\1\53\13\0\7\53\1\207\25\53\6\0\2\53\1\0"+
    "\1\53\13\0\1\207\34\53\7\0\1\255\42\0\2\255"+
    "\1\0\2\255\11\0\2\53\1\0\1\53\13\0\21\53"+
    "\1\207\13\53\6\0\2\53\1\0\1\53\13\0\11\53"+
    "\1\u0136\23\53\6\0\2\53\1\0\1\53\13\0\5\53"+
    "\1\u0137\27\53\6\0\2\53\1\0\1\53\13\0\1\u0138"+
    "\34\53\6\0\2\53\1\0\1\53\13\0\10\53\1\u0139"+
    "\24\53\6\0\2\53\1\0\1\53\13\0\1\340\34\53"+
    "\6\0\2\53\1\0\1\53\13\0\1\53\1\250\33\53"+
    "\6\0\2\53\1\0\1\53\13\0\3\53\1\u013a\31\53"+
    "\6\0\2\53\1\0\1\53\13\0\15\53\1\354\17\53"+
    "\6\0\2\53\1\0\1\53\13\0\14\53\1\u013b\20\53"+
    "\6\0\2\53\1\0\1\53\13\0\13\53\1\u013c\5\53"+
    "\1\u013d\13\53\6\0\2\53\1\0\1\53\13\0\5\53"+
    "\1\u013e\27\53\6\0\2\53\1\0\1\53\13\0\1\u013f"+
    "\34\53\6\0\2\53\1\0\1\53\13\0\11\53\1\207"+
    "\23\53\6\0\2\53\1\0\1\53\13\0\14\53\1\u0140"+
    "\20\53\6\0\2\53\1\0\1\53\13\0\1\u0141\1\u0142"+
    "\33\53\6\0\2\53\1\0\1\53\13\0\1\u0143\1\u0144"+
    "\33\53\6\0\2\53\1\0\1\53\13\0\17\53\1\136"+
    "\15\53\6\0\2\53\1\0\1\53\13\0\1\53\1\247"+
    "\33\53\6\0\2\53\1\0\1\53\13\0\1\53\1\u0145"+
    "\2\53\1\u0146\30\53\6\0\2\53\1\0\1\53\13\0"+
    "\2\53\1\352\32\53\6\0\2\53\1\0\1\53\13\0"+
    "\1\237\34\53\6\0\2\53\1\0\1\53\13\0\4\53"+
    "\1\207\30\53\6\0\2\53\1\0\1\53\13\0\27\53"+
    "\1\u0147\5\53\6\0\2\53\1\0\1\53\13\0\27\53"+
    "\1\207\5\53\6\0\2\53\1\0\1\53\13\0\27\53"+
    "\1\u0148\5\53\6\0\2\53\1\0\1\53\13\0\1\53"+
    "\1\u0149\33\53\6\0\2\53\1\0\1\53\13\0\1\u014a"+
    "\34\53\6\0\2\53\1\0\1\53\13\0\14\53\1\u014b"+
    "\20\53\6\0\2\53\1\0\1\53\13\0\14\53\1\306"+
    "\20\53\6\0\2\53\1\0\1\53\13\0\22\53\1\u014c"+
    "\12\53\6\0\2\53\1\0\1\53\13\0\3\53\1\u014d"+
    "\31\53\6\0\2\53\1\0\1\53\13\0\6\53\1\u014e"+
    "\5\53\1\u014f\20\53\6\0\2\53\1\0\1\53\13\0"+
    "\15\53\1\272\11\53\1\u0150\5\53\6\0\2\53\1\0"+
    "\1\53\13\0\1\u0151\34\53\6\0\2\53\1\0\1\53"+
    "\13\0\12\53\1\u0152\22\53\6\0\2\53\1\0\1\53"+
    "\13\0\1\u0153\34\53\6\0\2\53\1\0\1\53\13\0"+
    "\6\53\1\207\26\53\6\0\2\53\1\0\1\53\13\0"+
    "\2\53\1\u0154\32\53\6\0\2\53\1\0\1\53\13\0"+
    "\12\53\1\u0155\22\53\6\0\2\53\1\0\1\53\13\0"+
    "\4\53\1\u0156\30\53\6\0\2\53\1\0\1\53\13\0"+
    "\3\53\1\u0157\31\53\6\0\2\53\1\0\1\53\13\0"+
    "\1\u0158\34\53\6\0\2\53\1\0\1\53\13\0\21\53"+
    "\1\306\13\53\6\0\2\53\1\0\1\53\13\0\4\53"+
    "\1\u0159\30\53\6\0\2\53\1\0\1\53\13\0\12\53"+
    "\1\u015a\22\53\6\0\2\53\1\0\1\53\13\0\1\u015b"+
    "\16\53\1\264\15\53\6\0\2\53\1\0\1\53\13\0"+
    "\5\53\1\207\27\53\6\0\2\53\1\0\1\53\13\0"+
    "\6\53\1\u0110\26\53\6\0\2\53\1\0\1\53\13\0"+
    "\5\53\1\74\27\53\6\0\2\53\1\0\1\53\13\0"+
    "\1\u015c\34\53\6\0\2\53\1\0\1\53\13\0\10\53"+
    "\1\207\2\53\1\u015d\21\53\6\0\2\53\1\0\1\53"+
    "\13\0\14\53\1\u015e\1\53\1\264\16\53\6\0\2\53"+
    "\1\0\1\53\13\0\10\53\1\u015f\24\53\6\0\2\53"+
    "\1\0\1\53\13\0\12\53\1\u0160\22\53\6\0\2\53"+
    "\1\0\1\53\13\0\4\53\1\u0161\1\306\27\53\6\0"+
    "\2\53\1\0\1\53\13\0\1\u0162\34\53\6\0\2\53"+
    "\1\0\1\53\13\0\14\53\1\u0101\20\53\6\0\2\53"+
    "\1\0\1\53\13\0\4\53\1\u0163\30\53\6\0\2\53"+
    "\1\0\1\53\13\0\15\53\1\u0164\17\53\6\0\2\53"+
    "\1\0\1\53\13\0\1\u0165\34\53\6\0\2\53\1\0"+
    "\1\53\13\0\10\53\1\u0166\24\53\6\0\2\53\1\0"+
    "\1\53\13\0\27\53\1\136\5\53\6\0\2\53\1\0"+
    "\1\53\13\0\14\53\1\u0167\20\53\6\0\2\53\1\0"+
    "\1\53\13\0\3\53\1\u0168\31\53\6\0\2\53\1\0"+
    "\1\53\13\0\5\53\1\306\27\53\6\0\2\53\1\0"+
    "\1\53\13\0\1\207\3\53\1\207\4\53\1\u0169\23\53"+
    "\6\0\2\53\1\0\1\53\13\0\21\53\1\254\13\53"+
    "\6\0\2\53\1\0\1\53\13\0\10\53\1\107\24\53"+
    "\6\0\2\53\1\0\1\53\13\0\1\53\1\u013f\33\53"+
    "\6\0\2\53\1\0\1\53\13\0\5\53\1\u016a\27\53"+
    "\6\0\2\53\1\0\1\53\13\0\3\53\1\366\6\53"+
    "\1\u016b\22\53\6\0\2\53\1\0\1\53\13\0\10\53"+
    "\1\u016c\1\u016d\4\53\1\u016e\5\53\1\u016f\10\53\6\0"+
    "\2\53\1\0\1\53\13\0\6\53\1\u0170\26\53\6\0"+
    "\2\53\1\0\1\53\13\0\15\53\1\u0171\17\53\6\0"+
    "\2\53\1\0\1\53\13\0\11\53\1\136\23\53\6\0"+
    "\2\53\1\0\1\53\13\0\11\53\1\u0172\23\53\6\0"+
    "\2\53\1\0\1\53\13\0\5\53\1\u0173\27\53\6\0"+
    "\2\53\1\0\1\53\13\0\13\53\1\325\20\53\1\u0174"+
    "\6\0\2\53\1\0\1\53\13\0\5\53\1\u0175\27\53"+
    "\6\0\2\53\1\0\1\53\13\0\6\53\1\310\26\53"+
    "\6\0\2\53\1\0\1\53\13\0\13\53\1\u0176\21\53"+
    "\6\0\2\53\1\0\1\53\13\0\1\u0177\34\53\6\0"+
    "\2\53\1\0\1\53\13\0\5\53\1\u0178\27\53\6\0"+
    "\2\53\1\0\1\53\13\0\1\u0179\34\53\6\0\2\53"+
    "\1\0\1\53\13\0\5\53\1\u017a\27\53\6\0\2\53"+
    "\1\0\1\53\13\0\10\53\1\u017b\24\53\6\0\2\53"+
    "\1\0\1\53\13\0\33\53\1\254\1\53\6\0\2\53"+
    "\1\0\1\53\13\0\1\u017c\34\53\6\0\2\53\1\0"+
    "\1\53\13\0\1\u017d\12\53\1\207\11\53\1\207\3\53"+
    "\1\207\3\53\6\0\2\53\1\0\1\53\13\0\1\362"+
    "\3\53\1\u017e\30\53\6\0\2\53\1\0\1\53\13\0"+
    "\5\53\1\u0161\27\53\6\0\2\53\1\0\1\53\13\0"+
    "\4\53\1\u017f\30\53\6\0\2\53\1\0\1\53\13\0"+
    "\12\53\1\u0180\22\53\6\0\2\53\1\0\1\53\13\0"+
    "\13\53\1\u0181\21\53\6\0\2\53\1\0\1\53\13\0"+
    "\13\53\1\207\21\53\6\0\2\53\1\0\1\53\13\0"+
    "\1\53\1\u0182\33\53\6\0\2\53\1\0\1\53\13\0"+
    "\22\53\1\352\12\53\6\0\2\53\1\0\1\53\13\0"+
    "\16\53\1\u0183\16\53\6\0\2\53\1\0\1\53\13\0"+
    "\1\250\3\53\1\257\30\53\6\0\2\53\1\0\1\53"+
    "\13\0\17\53\1\u0184\15\53\6\0\2\53\1\0\1\53"+
    "\13\0\12\53\1\u0185\1\53\1\u0186\20\53\6\0\2\53"+
    "\1\0\1\53\13\0\7\53\1\352\1\53\1\u0187\5\53"+
    "\1\u0188\2\53\1\207\12\53\6\0\2\53\1\0\1\53"+
    "\13\0\1\53\1\u0189\33\53\6\0\2\53\1\0\1\53"+
    "\13\0\20\53\1\207\14\53\6\0\2\53\1\0\1\53"+
    "\13\0\20\53\1\u018a\14\53\6\0\2\53\1\0\1\53"+
    "\13\0\1\u018b\34\53\6\0\2\53\1\0\1\53\13\0"+
    "\3\53\1\u018c\31\53\6\0\2\53\1\0\1\u018d\13\0"+
    "\35\53\6\0\2\53\1\0\1\53\13\0\1\53\1\u018e"+
    "\33\53\6\0\2\53\1\0\1\53\13\0\10\53\1\u018f"+
    "\3\53\1\u012c\20\53\6\0\2\53\1\0\1\53\13\0"+
    "\22\53\1\u0190\12\53\6\0\2\53\1\0\1\53\13\0"+
    "\21\53\1\u0191\13\53\6\0\2\53\1\0\1\53\13\0"+
    "\5\53\1\254\1\207\26\53\6\0\2\53\1\0\1\53"+
    "\13\0\11\53\1\u0192\23\53\6\0\2\53\1\0\1\53"+
    "\13\0\1\53\1\u0193\6\53\1\264\24\53\6\0\2\53"+
    "\1\0\1\53\13\0\10\53\1\u0194\24\53\6\0\2\53"+
    "\1\0\1\53\13\0\11\53\1\352\23\53\6\0\2\53"+
    "\1\0\1\53\13\0\11\53\1\u0195\10\53\1\u0196\12\53"+
    "\6\0\2\53\1\0\1\53\13\0\11\53\1\u0197\23\53"+
    "\6\0\2\53\1\0\1\53\13\0\15\53\1\u011e\17\53"+
    "\6\0\2\53\1\0\1\53\13\0\7\53\1\u0198\25\53"+
    "\6\0\2\53\1\0\1\53\13\0\14\53\1\u0199\20\53"+
    "\6\0\2\53\1\0\1\53\13\0\6\53\1\306\26\53"+
    "\6\0\2\53\1\0\1\53\13\0\13\53\1\306\21\53"+
    "\6\0\2\53\1\0\1\53\13\0\14\53\1\u019a\20\53"+
    "\6\0\2\53\1\0\1\53\13\0\1\53\1\u019b\33\53"+
    "\6\0\2\53\1\0\1\53\13\0\1\u019c\34\53\6\0"+
    "\2\53\1\0\1\53\13\0\15\53\1\207\17\53\6\0"+
    "\2\53\1\0\1\53\13\0\11\53\1\104\23\53\6\0"+
    "\2\53\1\0\1\53\13\0\1\u019d\34\53\6\0\2\53"+
    "\1\0\1\53\13\0\1\u015a\34\53\6\0\2\53\1\0"+
    "\1\53\13\0\12\53\1\u019e\22\53\6\0\2\53\1\0"+
    "\1\53\13\0\12\53\1\u013f\22\53\6\0\2\53\1\0"+
    "\1\53\13\0\1\53\1\u019f\33\53\6\0\2\53\1\0"+
    "\1\53\13\0\22\53\1\306\12\53\6\0\2\53\1\0"+
    "\1\53\13\0\4\53\1\107\30\53\6\0\2\53\1\0"+
    "\1\53\13\0\7\53\1\75\25\53\6\0\2\53\1\0"+
    "\1\53\13\0\13\53\1\325\21\53\6\0\2\53\1\0"+
    "\1\53\13\0\14\53\1\u01a0\20\53\6\0\2\53\1\0"+
    "\1\53\13\0\13\53\1\u01a1\21\53\6\0\2\53\1\0"+
    "\1\53\13\0\1\u01a2\34\53\6\0\2\53\1\0\1\53"+
    "\13\0\4\53\1\254\30\53\6\0\2\53\1\0\1\53"+
    "\13\0\15\53\1\u01a3\17\53\6\0\2\53\1\0\1\53"+
    "\13\0\5\53\1\u01a4\27\53\6\0\2\53\1\0\1\53"+
    "\13\0\12\53\1\u01a5\22\53\6\0\2\53\1\0\1\53"+
    "\13\0\4\53\1\u01a6\30\53\6\0\2\53\1\0\1\53"+
    "\13\0\17\53\1\u01a7\15\53\6\0\2\53\1\0\1\53"+
    "\13\0\3\53\1\u01a8\31\53\6\0\2\53\1\0\1\53"+
    "\13\0\14\53\1\u01a9\20\53\6\0\2\53\1\0\1\53"+
    "\13\0\12\53\1\u01aa\22\53\6\0\2\53\1\0\1\53"+
    "\13\0\4\53\1\u01ab\12\53\1\u01ac\15\53\6\0\2\53"+
    "\1\0\1\53\13\0\3\53\1\u01ad\31\53\6\0\2\53"+
    "\1\0\1\53\13\0\5\53\1\272\27\53\6\0\2\53"+
    "\1\0\1\53\13\0\11\53\1\u01a3\23\53\6\0\2\53"+
    "\1\0\1\53\13\0\3\53\1\366\31\53\6\0\2\53"+
    "\1\0\1\53\13\0\1\u01ae\34\53\6\0\2\53\1\0"+
    "\1\53\13\0\10\53\1\u01af\24\53\6\0\2\53\1\0"+
    "\1\53\13\0\3\53\1\352\31\53\6\0\2\53\1\0"+
    "\1\53\13\0\27\53\1\264\5\53\6\0\2\53\1\0"+
    "\1\53\13\0\11\53\1\u01b0\23\53\6\0\2\53\1\0"+
    "\1\53\13\0\1\u018e\34\53\6\0\1\207\1\53\1\0"+
    "\1\53\13\0\10\53\1\u01b1\24\53\6\0\2\53\1\0"+
    "\1\u01b2\13\0\35\53\6\0\2\53\1\0\1\53\13\0"+
    "\5\53\1\u01b3\27\53\6\0\2\53\1\0\1\53\13\0"+
    "\5\53\1\u01b4\27\53\6\0\2\53\1\0\1\53\13\0"+
    "\1\53\1\u01b5\33\53\6\0\2\53\1\0\1\53\13\0"+
    "\5\53\1\u01b6\27\53\6\0\2\53\1\0\1\53\13\0"+
    "\16\53\1\u01b7\16\53\6\0\2\53\1\0\1\53\13\0"+
    "\5\53\1\u01a3\27\53\6\0\2\53\1\0\1\53\13\0"+
    "\5\53\1\u01b8\27\53\6\0\2\53\1\0\1\53\13\0"+
    "\11\53\1\306\23\53\6\0\2\53\1\0\1\53\13\0"+
    "\24\53\1\207\10\53\6\0\2\53\1\0\1\53\13\0"+
    "\1\53\1\u01b9\33\53\6\0\2\53\1\0\1\53\13\0"+
    "\14\53\1\u01ba\20\53\6\0\2\53\1\0\1\53\13\0"+
    "\1\u01bb\34\53\6\0\2\53\1\0\1\53\13\0\1\u01bc"+
    "\34\53\6\0\2\53\1\0\1\53\13\0\16\53\1\131"+
    "\16\53\6\0\2\53\1\0\1\53\13\0\1\u01bd\34\53"+
    "\6\0\2\53\1\0\1\53\13\0\1\u01be\34\53\6\0"+
    "\2\53\1\0\1\53\13\0\15\53\1\u01bf\17\53\6\0"+
    "\2\53\1\0\1\53\13\0\4\53\1\u01c0\30\53\6\0"+
    "\2\53\1\0\1\53\13\0\3\53\1\u01c1\31\53\6\0"+
    "\2\53\1\0\1\53\13\0\3\53\1\u01c2\31\53\6\0"+
    "\2\53\1\0\1\53\13\0\1\53\1\u01c3\33\53\6\0"+
    "\2\53\1\0\1\53\13\0\1\u01c4\34\53\6\0\2\53"+
    "\1\0\1\53\13\0\15\53\1\325\17\53\6\0\2\53"+
    "\1\0\1\53\13\0\4\53\1\u01c5\30\53\6\0\2\53"+
    "\1\0\1\53\13\0\1\53\1\u01c6\33\53\6\0\2\53"+
    "\1\0\1\53\13\0\1\u01c7\34\53\6\0\2\53\1\0"+
    "\1\53\13\0\14\53\1\u01c8\20\53\6\0\2\53\1\0"+
    "\1\53\13\0\4\53\1\u01c9\30\53\6\0\2\53\1\0"+
    "\1\53\13\0\1\u012c\13\53\1\306\20\53\6\0\2\53"+
    "\1\0\1\53\13\0\33\53\1\207\1\53\6\0\2\53"+
    "\1\0\1\u018d\13\0\1\53\1\u01ca\33\53\6\0\2\53"+
    "\1\0\1\53\13\0\12\53\1\254\22\53\6\0\2\53"+
    "\1\0\1\u01cb\13\0\35\53\6\0\2\53\1\0\1\53"+
    "\13\0\17\53\1\u01cc\15\53\6\0\2\53\1\0\1\53"+
    "\13\0\4\53\1\u01cd\30\53\6\0\2\53\1\0\1\53"+
    "\13\0\3\53\1\u01ce\31\53\6\0\2\53\1\0\1\53"+
    "\13\0\5\53\1\u01cf\27\53\6\0\2\53\1\0\1\53"+
    "\13\0\1\53\1\u01b0\33\53\6\0\2\53\1\0\1\53"+
    "\13\0\1\306\34\53\6\0\2\53\1\0\1\53\13\0"+
    "\23\53\1\207\11\53\6\0\2\53\1\0\1\53\13\0"+
    "\5\53\1\u01d0\21\53\1\u01d1\5\53\6\0\2\53\1\0"+
    "\1\53\13\0\1\u01d2\34\53\6\0\2\53\1\0\1\53"+
    "\13\0\14\53\1\u01d3\20\53\6\0\2\53\1\0\1\53"+
    "\13\0\3\53\1\237\31\53\6\0\2\53\1\0\1\53"+
    "\13\0\5\53\1\254\27\53\6\0\2\53\1\0\1\53"+
    "\13\0\2\53\1\u01d4\32\53\6\0\2\53\1\0\1\53"+
    "\13\0\1\53\1\u01d5\33\53\6\0\2\53\1\0\1\53"+
    "\13\0\13\53\1\75\21\53\6\0\2\53\1\0\1\53"+
    "\13\0\1\333\34\53\6\0\2\53\1\0\1\53\13\0"+
    "\2\53\1\u017a\32\53\6\0\2\53\1\0\1\53\13\0"+
    "\21\53\1\u01c1\13\53\6\0\2\53\1\0\1\53\13\0"+
    "\14\53\1\u01d6\20\53\6\0\2\53\1\0\1\53\13\0"+
    "\4\53\1\u01d7\30\53\6\0\2\53\1\0\1\53\13\0"+
    "\1\133\34\53\6\0\2\53\1\0\1\53\13\0\1\53"+
    "\1\207\33\53\6\0\2\53\1\0\1\53\13\0\1\u01d8"+
    "\34\53\6\0\2\53\1\0\1\53\13\0\3\53\1\u01d9"+
    "\31\53\6\0\2\53\1\0\1\53\13\0\5\53\1\250"+
    "\27\53\6\0\2\53\1\0\1\53\13\0\1\u01da\34\53"+
    "\6\0\2\53\1\0\1\53\13\0\22\53\1\264\12\53"+
    "\6\0\2\53\1\0\1\53\13\0\13\53\1\u01db\1\325"+
    "\20\53\6\0\2\53\1\0\1\53\13\0\1\u012c\34\53"+
    "\6\0\2\53\1\0\1\53\13\0\15\53\1\u01dc\17\53"+
    "\6\0\2\53\1\0\1\53\13\0\20\53\1\u01dd\14\53"+
    "\6\0\2\53\1\0\1\53\13\0\14\53\1\u01de\20\53"+
    "\6\0\2\53\1\0\1\53\13\0\1\53\1\u01df\33\53"+
    "\6\0\2\53\1\0\1\53\13\0\1\u01e0\34\53\6\0"+
    "\2\53\1\0\1\53\13\0\27\53\1\u013b\5\53\6\0"+
    "\2\53\1\0\1\53\13\0\4\53\1\u01e1\30\53\6\0"+
    "\2\53\1\0\1\53\13\0\4\53\1\u01e2\30\53\6\0"+
    "\1\254\1\53\1\0\1\53\13\0\35\53\6\0\2\53"+
    "\1\0\1\53\13\0\14\53\1\u01e3\20\53\6\0\2\53"+
    "\1\0\1\53\13\0\22\53\1\u01e4\12\53\6\0\2\53"+
    "\1\0\1\53\13\0\11\53\1\u01e5\23\53\6\0\2\53"+
    "\1\0\1\53\13\0\6\53\1\u01e6\26\53\6\0\2\53"+
    "\1\0\1\53\13\0\5\53\1\u01e7\27\53\6\0\2\53"+
    "\1\0\1\53\13\0\27\53\1\366\5\53\6\0\2\53"+
    "\1\0\1\53\13\0\1\53\1\237\33\53\6\0\2\53"+
    "\1\0\1\53\13\0\5\53\1\u01e8\27\53\6\0\2\53"+
    "\1\0\1\53\13\0\3\53\1\306\31\53\6\0\2\53"+
    "\1\0\1\53\13\0\14\53\1\153\20\53\6\0\2\53"+
    "\1\0\1\53\13\0\1\53\1\75\33\53\6\0\2\53"+
    "\1\0\1\53\13\0\3\53\1\u01e9\31\53\6\0\2\53"+
    "\1\0\1\53\13\0\6\53\1\u01ea\26\53\6\0\2\53"+
    "\1\0\1\53\13\0\1\53\1\u01eb\33\53\6\0\2\53"+
    "\1\0\1\53\13\0\1\u01ec\34\53\6\0\2\53\1\0"+
    "\1\53\13\0\14\53\1\u01ed\20\53\6\0\2\53\1\0"+
    "\1\53\13\0\4\53\1\u01ee\30\53\6\0\2\53\1\0"+
    "\1\53\13\0\10\53\1\u01ef\3\53\1\76\20\53\6\0"+
    "\2\53\1\0\1\53\13\0\3\53\1\u01f0\20\53\1\u01f1"+
    "\10\53\6\0\2\53\1\0\1\53\13\0\4\53\1\u01f2"+
    "\30\53\6\0\2\53\1\0\1\53\13\0\4\53\1\u01f3"+
    "\30\53\6\0\2\53\1\0\1\53\13\0\10\53\1\u01f4"+
    "\24\53\6\0\2\53\1\0\1\53\13\0\6\53\1\u01f5"+
    "\26\53\6\0\2\53\1\0\1\53\13\0\14\53\1\u015c"+
    "\20\53\6\0\2\53\1\0\1\53\13\0\11\53\1\254"+
    "\23\53\6\0\2\53\1\0\1\53\13\0\1\u01f6\34\53"+
    "\6\0\2\53\1\0\1\53\13\0\1\53\1\u01f7\33\53"+
    "\6\0\2\53\1\0\1\53\13\0\14\53\1\275\20\53"+
    "\6\0\2\53\1\0\1\53\13\0\3\53\1\u01f8\31\53"+
    "\6\0\2\53\1\0\1\53\13\0\13\53\1\u01f9\21\53"+
    "\6\0\2\53\1\0\1\53\13\0\6\53\1\u01b5\26\53"+
    "\6\0\2\53\1\0\1\53\13\0\15\53\1\u0192\17\53"+
    "\6\0\2\53\1\0\1\53\13\0\15\53\1\u01fa\17\53"+
    "\6\0\2\53\1\0\1\53\13\0\4\53\1\u015b\30\53"+
    "\6\0\2\53\1\0\1\53\13\0\5\53\1\u01fb\27\53"+
    "\6\0\2\53\1\0\1\53\13\0\1\53\1\340\33\53"+
    "\6\0\2\53\1\0\1\53\13\0\14\53\1\u012c\20\53"+
    "\6\0\2\53\1\0\1\53\13\0\2\53\1\u01fc\32\53"+
    "\6\0\2\53\1\0\1\53\13\0\6\53\1\u01fd\26\53"+
    "\6\0\2\53\1\0\1\53\13\0\5\53\1\u01fe\27\53"+
    "\6\0\2\53\1\0\1\53\13\0\4\53\1\u01ff\30\53"+
    "\6\0\2\53\1\0\1\53\13\0\5\53\1\u0200\27\53"+
    "\6\0\2\53\1\0\1\53\13\0\27\53\1\u0201\5\53"+
    "\6\0\2\53\1\0\1\53\13\0\11\53\1\110\23\53"+
    "\6\0\2\53\1\0\1\53\13\0\2\53\1\u0202\32\53"+
    "\6\0\2\53\1\0\1\53\13\0\32\53\1\343\2\53"+
    "\6\0\2\53\1\0\1\53\13\0\1\53\1\u0203\33\53"+
    "\6\0\2\53\1\0\1\53\13\0\1\53\1\u0204\33\53"+
    "\6\0\2\53\1\0\1\53\13\0\10\53\1\343\5\53"+
    "\1\u01a3\16\53\6\0\2\53\1\0\1\53\13\0\1\u0205"+
    "\34\53\6\0\2\53\1\0\1\53\13\0\1\53\1\76"+
    "\33\53\6\0\2\53\1\0\1\53\13\0\1\53\1\u0206"+
    "\33\53\6\0\2\53\1\0\1\53\13\0\2\53\1\340"+
    "\32\53\6\0\2\53\1\0\1\53\13\0\3\53\1\u0174"+
    "\31\53\6\0\2\53\1\0\1\53\13\0\4\53\1\207"+
    "\1\53\1\u011e\26\53\6\0\2\53\1\0\1\53\13\0"+
    "\14\53\1\136\20\53\6\0\2\53\1\0\1\53\13\0"+
    "\1\53\1\325\33\53\6\0\2\53\1\0\1\53\13\0"+
    "\1\u0207\34\53\6\0\2\53\1\0\1\53\13\0\5\53"+
    "\1\u0208\27\53\6\0\2\53\1\0\1\53\13\0\12\53"+
    "\1\306\22\53\6\0\2\53\1\0\1\53\13\0\1\u0209"+
    "\34\53\6\0\2\53\1\0\1\53\13\0\13\53\1\u020a"+
    "\21\53\6\0\2\53\1\0\1\53\13\0\10\53\1\270"+
    "\24\53\6\0\2\53\1\0\1\53\13\0\5\53\1\u020b"+
    "\27\53\6\0\2\53\1\0\1\53\13\0\2\53\1\u020c"+
    "\32\53\6\0\2\53\1\0\1\53\13\0\14\53\1\u020d"+
    "\20\53\6\0\2\53\1\0\1\53\13\0\25\53\2\207"+
    "\6\53\6\0\2\53\1\0\1\53\13\0\27\53\1\325"+
    "\5\53\6\0\2\53\1\0\1\53\13\0\4\53\1\272"+
    "\30\53\6\0\2\53\1\0\1\53\13\0\11\53\1\u010c"+
    "\23\53\6\0\2\53\1\0\1\53\13\0\14\53\1\u020e"+
    "\20\53\6\0\2\53\1\0\1\53\13\0\1\53\1\301"+
    "\33\53\6\0\2\53\1\0\1\53\13\0\13\53\1\u0119"+
    "\21\53\6\0\2\53\1\0\1\53\13\0\11\53\1\u020f"+
    "\23\53\6\0\2\53\1\0\1\53\13\0\27\53\1\254"+
    "\5\53\6\0\2\53\1\0\1\53\13\0\23\53\1\306"+
    "\11\53\6\0\2\53\1\0\1\53\13\0\6\53\1\u011e"+
    "\26\53\6\0\2\53\1\0\1\53\13\0\14\53\1\u0210"+
    "\20\53\6\0\2\53\1\0\1\53\13\0\22\53\1\u0157"+
    "\12\53\6\0\2\53\1\0\1\53\13\0\1\53\1\u0211"+
    "\33\53\6\0\2\53\1\0\1\53\13\0\13\53\1\u0212"+
    "\21\53\6\0\2\53\1\0\1\53\13\0\13\53\1\340"+
    "\21\53\6\0\2\53\1\0\1\53\13\0\1\53\1\u0213"+
    "\33\53\6\0\2\53\1\0\1\53\13\0\6\53\1\u0214"+
    "\26\53\6\0\2\53\1\0\1\53\13\0\10\53\1\207"+
    "\3\53\1\u0101\20\53\6\0\2\53\1\0\1\53\13\0"+
    "\6\53\1\u0215\26\53\6\0\2\53\1\0\1\53\13\0"+
    "\3\53\1\272\31\53\6\0\2\53\1\0\1\53\13\0"+
    "\25\53\1\207\7\53\6\0\2\53\1\0\1\53\13\0"+
    "\6\53\1\u0216\26\53\6\0\2\53\1\0\1\u0217\13\0"+
    "\35\53\6\0\2\53\1\0\1\53\13\0\14\53\1\u0218"+
    "\20\53\6\0\2\53\1\0\1\53\13\0\1\u0219\34\53"+
    "\6\0\2\53\1\0\1\53\13\0\4\53\1\u021a\4\53"+
    "\1\250\23\53\6\0\2\53\1\0\1\53\13\0\1\53"+
    "\1\u01c2\33\53\6\0\2\53\1\0\1\53\13\0\1\u021b"+
    "\34\53\6\0\2\53\1\0\1\53\13\0\4\53\1\272"+
    "\3\53\1\270\24\53\6\0\2\53\1\0\1\53\13\0"+
    "\12\53\1\u021c\22\53\6\0\2\53\1\0\1\53\13\0"+
    "\1\u021d\34\53\6\0\2\53\1\0\1\53\13\0\22\53"+
    "\1\107\12\53\6\0\2\53\1\0\1\53\13\0\11\53"+
    "\1\u021e\23\53\6\0\2\53\1\0\1\53\13\0\5\53"+
    "\1\u021f\27\53\6\0\2\53\1\0\1\53\13\0\3\53"+
    "\1\u019a\31\53\6\0\2\53\1\0\1\53\13\0\6\53"+
    "\1\u0220\26\53\6\0\2\53\1\0\1\53\13\0\14\53"+
    "\1\u01a3\20\53\6\0\2\53\1\0\1\53\13\0\4\53"+
    "\1\u0221\30\53\6\0\2\53\1\0\1\53\13\0\5\53"+
    "\1\76\27\53\6\0\2\53\1\0\1\53\13\0\1\76"+
    "\34\53\6\0\2\53\1\0\1\53\13\0\12\53\1\u0181"+
    "\22\53\6\0\2\53\1\0\1\53\13\0\13\53\1\u0222"+
    "\21\53\6\0\1\u0223\1\53\1\0\1\53\13\0\35\53"+
    "\6\0\2\53\1\0\1\53\13\0\4\53\1\u0224\30\53"+
    "\6\0\2\53\1\0\1\53\13\0\15\53\1\u0225\17\53"+
    "\6\0\2\53\1\0\1\53\13\0\4\53\1\u0226\30\53"+
    "\6\0\2\53\1\0\1\53\13\0\5\53\1\u0131\27\53"+
    "\6\0\2\53\1\0\1\53\13\0\15\53\1\u0227\17\53"+
    "\6\0\2\53\1\0\1\53\13\0\1\53\1\u0228\33\53"+
    "\6\0\2\53\1\0\1\53\13\0\11\53\1\u0229\23\53"+
    "\6\0\2\53\1\0\1\u022a\13\0\35\53\6\0\2\53"+
    "\1\0\1\53\13\0\12\53\1\u022b\22\53\6\0\2\53"+
    "\1\0\1\53\13\0\6\53\1\u022c\26\53\6\0\2\53"+
    "\1\0\1\u022d\13\0\35\53\6\0\2\53\1\0\1\53"+
    "\13\0\6\53\1\u01f0\26\53\6\0\2\53\1\0\1\53"+
    "\13\0\5\53\1\u0223\27\53\6\0\2\53\1\0\1\53"+
    "\13\0\24\53\1\u022e\10\53\6\0\2\53\1\0\1\53"+
    "\13\0\11\53\1\u022f\23\53\6\0\2\53\1\0\1\53"+
    "\13\0\25\53\1\207\2\53\2\207\3\53\6\0\2\53"+
    "\1\0\1\53\13\0\27\53\1\u0230\5\53\6\0\2\53"+
    "\1\0\1\53\13\0\1\u0231\34\53\6\0\2\53\1\0"+
    "\1\53\13\0\6\53\1\272\26\53\6\0\2\53\1\0"+
    "\1\53\13\0\1\53\1\104\33\53\6\0\2\53\1\0"+
    "\1\53\13\0\5\53\1\u01e9\27\53\6\0\2\53\1\0"+
    "\1\53\13\0\1\u0232\34\53\6\0\2\53\1\0\1\53"+
    "\13\0\1\272\34\53\6\0\2\53\1\0\1\53\13\0"+
    "\22\53\1\u0233\12\53\6\0\2\53\1\0\1\53\13\0"+
    "\22\53\1\u0234\12\53\6\0\2\53\1\0\1\53\13\0"+
    "\1\107\34\53\6\0\2\53\1\0\1\53\13\0\12\53"+
    "\1\u0235\22\53\6\0\2\53\1\0\1\53\13\0\10\53"+
    "\1\313\24\53\6\0\2\53\1\0\1\53\13\0\27\53"+
    "\1\272\5\53\6\0\2\53\1\0\1\53\13\0\2\53"+
    "\1\366\1\53\1\u01ee\1\u0236\4\53\1\u0235\22\53\6\0"+
    "\2\53\1\0\1\53\13\0\14\53\1\u0237\20\53\6\0"+
    "\2\53\1\0\1\53\13\0\1\365\34\53\6\0\2\53"+
    "\1\0\1\53\13\0\4\53\1\u0238\30\53\6\0\2\53"+
    "\1\0\1\53\13\0\5\53\1\107\27\53\6\0\2\53"+
    "\1\0\1\53\13\0\10\53\1\u0239\24\53\6\0\1\207"+
    "\1\53\1\0\1\53\13\0\35\53\6\0\2\53\1\0"+
    "\1\53\13\0\10\53\1\u023a\24\53\6\0\2\53\1\0"+
    "\1\53\13\0\10\53\1\264\24\53\6\0\2\53\1\0"+
    "\1\53\13\0\13\53\1\136\21\53\6\0\2\53\1\0"+
    "\1\53\13\0\6\53\1\u023b\26\53\6\0\2\53\1\0"+
    "\1\53\13\0\21\53\1\272\13\53\6\0\2\53\1\0"+
    "\1\53\13\0\4\53\1\u023c\30\53\6\0\2\53\1\0"+
    "\1\53\13\0\21\53\1\u012d\13\53\6\0\2\53\1\0"+
    "\1\53\13\0\1\u023d\34\53\6\0\2\53\1\0\1\53"+
    "\13\0\1\53\1\u023e\33\53\6\0\2\53\1\0\1\53"+
    "\13\0\2\53\1\u023f\32\53\6\0\2\53\1\0\1\53"+
    "\13\0\15\53\1\206\17\53\6\0\2\53\1\0\1\u0240"+
    "\13\0\35\53\6\0\2\53\1\0\1\53\13\0\4\53"+
    "\1\u0241\30\53\6\0\2\53\1\0\1\53\13\0\7\53"+
    "\1\u0242\25\53\6\0\2\53\1\0\1\53\13\0\22\53"+
    "\1\u0243\12\53\6\0\2\53\1\0\1\53\13\0\1\u0244"+
    "\34\53\6\0\2\53\1\0\1\u0245\13\0\35\53\6\0"+
    "\2\53\1\0\1\53\13\0\6\53\1\u0246\1\53\1\u0247"+
    "\1\u0248\23\53\6\0\2\53\1\0\1\53\13\0\1\53"+
    "\1\153\33\53\6\0\2\53\1\0\1\53\13\0\11\53"+
    "\1\151\23\53\6\0\2\53\1\0\1\53\13\0\1\53"+
    "\1\u0249\11\53\1\u024a\21\53\6\0\2\53\1\0\1\53"+
    "\13\0\4\53\1\u024b\30\53\6\0\2\53\1\0\1\53"+
    "\13\0\2\53\1\254\32\53\6\0\2\53\1\0\1\53"+
    "\13\0\1\53\1\u024c\33\53\6\0\2\53\1\0\1\53"+
    "\13\0\3\53\1\u024d\31\53\6\0\2\53\1\0\1\53"+
    "\13\0\13\53\1\310\21\53\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28300];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\4\1\1\11\4\1\1\11\33\1\2\11"+
    "\2\1\1\11\2\1\1\11\2\1\1\11\2\1\1\0"+
    "\1\1\1\11\155\1\3\11\2\1\1\0\u019f\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[589];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public SQLTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "--", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.LITERAL_STRING_DOUBLE_QUOTE:
				state = STRING;
				start = text.offset;
				break;
			case Token.LITERAL_CHAR:
				state = CHAR;
				start = text.offset;
				break;
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new DefaultToken();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos =  s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SQLTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SQLTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }



    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }




  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          { addToken(Token.PREPROCESSOR);
          }
        case 23: break;
        case 2: 
          { addNullToken(); return firstToken;
          }
        case 24: break;
        case 21: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 25: break;
        case 19: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 26: break;
        case 4: 
          { addToken(Token.WHITESPACE);
          }
        case 27: break;
        case 15: 
          { addToken(start,zzStartRead-1, Token.LITERAL_CHAR); return firstToken;
          }
        case 28: break;
        case 10: 
          { start = zzMarkedPos-1; yybegin(CHAR);
          }
        case 29: break;
        case 7: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 30: break;
        case 8: 
          { addToken(Token.RESERVED_WORD);
          }
        case 31: break;
        case 6: 
          { addToken(Token.SEPARATOR);
          }
        case 32: break;
        case 16: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead, Token.LITERAL_CHAR);
          }
        case 33: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 34: break;
        case 22: 
          { addToken(Token.FUNCTION);
          }
        case 35: break;
        case 13: 
          { addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
          }
        case 36: break;
        case 18: 
          { addToken(Token.COMMENT_EOL);
          }
        case 37: break;
        case 9: 
          { start = zzMarkedPos-1; yybegin(STRING);
          }
        case 38: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 39: break;
        case 5: 
          { addToken(Token.OPERATOR);
          }
        case 40: break;
        case 14: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead, Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 41: break;
        case 11: 
          { addToken(Token.ERROR_IDENTIFIER); addNullToken(); return firstToken;
          }
        case 42: break;
        case 12: 
          { 
          }
        case 43: break;
        case 17: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 44: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case STRING: {
              addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
            }
            case 590: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 591: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 592: break;
            case CHAR: {
              addToken(start,zzStartRead-1, Token.LITERAL_CHAR); return firstToken;
            }
            case 593: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
